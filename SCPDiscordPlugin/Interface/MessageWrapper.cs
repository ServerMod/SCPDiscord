// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message_wrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SCPDiscord.Interface {

  /// <summary>Holder for reflection information generated from message_wrapper.proto</summary>
  public static partial class MessageWrapperReflection {

    #region Descriptor
    /// <summary>File descriptor for message_wrapper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageWrapperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXNzYWdlX3dyYXBwZXIucHJvdG8SFFNDUERpc2NvcmQuSW50ZXJmYWNl",
            "GiBCb3RUb1BsdWdpbi9Db25zb2xlQ29tbWFuZC5wcm90bxoeQm90VG9QbHVn",
            "aW4vUm9sZVJlc3BvbnNlLnByb3RvGiFCb3RUb1BsdWdpbi9TeW5jUm9sZUNv",
            "bW1hbmQucHJvdG8aI0JvdFRvUGx1Z2luL1Vuc3luY1JvbGVDb21tYW5kLnBy",
            "b3RvGh1QbHVnaW5Ub0JvdC9Cb3RBY3Rpdml0eS5wcm90bxoeUGx1Z2luVG9C",
            "b3QvQ2hhbm5lbFRvcGljLnByb3RvGh1QbHVnaW5Ub0JvdC9DaGF0TWVzc2Fn",
            "ZS5wcm90bxobUGx1Z2luVG9Cb3QvUm9sZVF1ZXJ5LnByb3RvIoUECg5NZXNz",
            "YWdlV3JhcHBlchI4Cgtib3RBY3Rpdml0eRgBIAEoCzIhLlNDUERpc2NvcmQu",
            "SW50ZXJmYWNlLkJvdEFjdGl2aXR5SAASOgoMY2hhbm5lbFRvcGljGAIgASgL",
            "MiIuU0NQRGlzY29yZC5JbnRlcmZhY2UuQ2hhbm5lbFRvcGljSAASOAoLY2hh",
            "dE1lc3NhZ2UYAyABKAsyIS5TQ1BEaXNjb3JkLkludGVyZmFjZS5DaGF0TWVz",
            "c2FnZUgAEjQKCXJvbGVRdWVyeRgEIAEoCzIfLlNDUERpc2NvcmQuSW50ZXJm",
            "YWNlLlJvbGVRdWVyeUgAEkAKD3N5bmNSb2xlQ29tbWFuZBgFIAEoCzIlLlND",
            "UERpc2NvcmQuSW50ZXJmYWNlLlN5bmNSb2xlQ29tbWFuZEgAEkQKEXVuc3lu",
            "Y1JvbGVDb21tYW5kGAYgASgLMicuU0NQRGlzY29yZC5JbnRlcmZhY2UuVW5z",
            "eW5jUm9sZUNvbW1hbmRIABI+Cg5jb25zb2xlQ29tbWFuZBgHIAEoCzIkLlND",
            "UERpc2NvcmQuSW50ZXJmYWNlLkNvbnNvbGVDb21tYW5kSAASOgoMcm9sZVJl",
            "c3BvbnNlGAggASgLMiIuU0NQRGlzY29yZC5JbnRlcmZhY2UuUm9sZVJlc3Bv",
            "bnNlSABCCQoHbWVzc2FnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SCPDiscord.Interface.ConsoleCommandReflection.Descriptor, global::SCPDiscord.Interface.RoleResponseReflection.Descriptor, global::SCPDiscord.Interface.SyncRoleCommandReflection.Descriptor, global::SCPDiscord.Interface.UnsyncRoleCommandReflection.Descriptor, global::SCPDiscord.Interface.BotActivityReflection.Descriptor, global::SCPDiscord.Interface.ChannelTopicReflection.Descriptor, global::SCPDiscord.Interface.ChatMessageReflection.Descriptor, global::SCPDiscord.Interface.RoleQueryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SCPDiscord.Interface.MessageWrapper), global::SCPDiscord.Interface.MessageWrapper.Parser, new[]{ "BotActivity", "ChannelTopic", "ChatMessage", "RoleQuery", "SyncRoleCommand", "UnsyncRoleCommand", "ConsoleCommand", "RoleResponse" }, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MessageWrapper : pb::IMessage<MessageWrapper>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessageWrapper> _parser = new pb::MessageParser<MessageWrapper>(() => new MessageWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SCPDiscord.Interface.MessageWrapperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWrapper(MessageWrapper other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.BotActivity:
          BotActivity = other.BotActivity.Clone();
          break;
        case MessageOneofCase.ChannelTopic:
          ChannelTopic = other.ChannelTopic.Clone();
          break;
        case MessageOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage.Clone();
          break;
        case MessageOneofCase.RoleQuery:
          RoleQuery = other.RoleQuery.Clone();
          break;
        case MessageOneofCase.SyncRoleCommand:
          SyncRoleCommand = other.SyncRoleCommand.Clone();
          break;
        case MessageOneofCase.UnsyncRoleCommand:
          UnsyncRoleCommand = other.UnsyncRoleCommand.Clone();
          break;
        case MessageOneofCase.ConsoleCommand:
          ConsoleCommand = other.ConsoleCommand.Clone();
          break;
        case MessageOneofCase.RoleResponse:
          RoleResponse = other.RoleResponse.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWrapper Clone() {
      return new MessageWrapper(this);
    }

    /// <summary>Field number for the "botActivity" field.</summary>
    public const int BotActivityFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.BotActivity BotActivity {
      get { return messageCase_ == MessageOneofCase.BotActivity ? (global::SCPDiscord.Interface.BotActivity) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.BotActivity;
      }
    }

    /// <summary>Field number for the "channelTopic" field.</summary>
    public const int ChannelTopicFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.ChannelTopic ChannelTopic {
      get { return messageCase_ == MessageOneofCase.ChannelTopic ? (global::SCPDiscord.Interface.ChannelTopic) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelTopic;
      }
    }

    /// <summary>Field number for the "chatMessage" field.</summary>
    public const int ChatMessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.ChatMessage ChatMessage {
      get { return messageCase_ == MessageOneofCase.ChatMessage ? (global::SCPDiscord.Interface.ChatMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChatMessage;
      }
    }

    /// <summary>Field number for the "roleQuery" field.</summary>
    public const int RoleQueryFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.RoleQuery RoleQuery {
      get { return messageCase_ == MessageOneofCase.RoleQuery ? (global::SCPDiscord.Interface.RoleQuery) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RoleQuery;
      }
    }

    /// <summary>Field number for the "syncRoleCommand" field.</summary>
    public const int SyncRoleCommandFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.SyncRoleCommand SyncRoleCommand {
      get { return messageCase_ == MessageOneofCase.SyncRoleCommand ? (global::SCPDiscord.Interface.SyncRoleCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SyncRoleCommand;
      }
    }

    /// <summary>Field number for the "unsyncRoleCommand" field.</summary>
    public const int UnsyncRoleCommandFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.UnsyncRoleCommand UnsyncRoleCommand {
      get { return messageCase_ == MessageOneofCase.UnsyncRoleCommand ? (global::SCPDiscord.Interface.UnsyncRoleCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UnsyncRoleCommand;
      }
    }

    /// <summary>Field number for the "consoleCommand" field.</summary>
    public const int ConsoleCommandFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.ConsoleCommand ConsoleCommand {
      get { return messageCase_ == MessageOneofCase.ConsoleCommand ? (global::SCPDiscord.Interface.ConsoleCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ConsoleCommand;
      }
    }

    /// <summary>Field number for the "roleResponse" field.</summary>
    public const int RoleResponseFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SCPDiscord.Interface.RoleResponse RoleResponse {
      get { return messageCase_ == MessageOneofCase.RoleResponse ? (global::SCPDiscord.Interface.RoleResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RoleResponse;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      BotActivity = 1,
      ChannelTopic = 2,
      ChatMessage = 3,
      RoleQuery = 4,
      SyncRoleCommand = 5,
      UnsyncRoleCommand = 6,
      ConsoleCommand = 7,
      RoleResponse = 8,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BotActivity, other.BotActivity)) return false;
      if (!object.Equals(ChannelTopic, other.ChannelTopic)) return false;
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (!object.Equals(RoleQuery, other.RoleQuery)) return false;
      if (!object.Equals(SyncRoleCommand, other.SyncRoleCommand)) return false;
      if (!object.Equals(UnsyncRoleCommand, other.UnsyncRoleCommand)) return false;
      if (!object.Equals(ConsoleCommand, other.ConsoleCommand)) return false;
      if (!object.Equals(RoleResponse, other.RoleResponse)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.BotActivity) hash ^= BotActivity.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelTopic) hash ^= ChannelTopic.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChatMessage) hash ^= ChatMessage.GetHashCode();
      if (messageCase_ == MessageOneofCase.RoleQuery) hash ^= RoleQuery.GetHashCode();
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) hash ^= SyncRoleCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) hash ^= UnsyncRoleCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.ConsoleCommand) hash ^= ConsoleCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.RoleResponse) hash ^= RoleResponse.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (messageCase_ == MessageOneofCase.BotActivity) {
        output.WriteRawTag(10);
        output.WriteMessage(BotActivity);
      }
      if (messageCase_ == MessageOneofCase.ChannelTopic) {
        output.WriteRawTag(18);
        output.WriteMessage(ChannelTopic);
      }
      if (messageCase_ == MessageOneofCase.ChatMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(ChatMessage);
      }
      if (messageCase_ == MessageOneofCase.RoleQuery) {
        output.WriteRawTag(34);
        output.WriteMessage(RoleQuery);
      }
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
        output.WriteRawTag(42);
        output.WriteMessage(SyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
        output.WriteRawTag(50);
        output.WriteMessage(UnsyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.ConsoleCommand) {
        output.WriteRawTag(58);
        output.WriteMessage(ConsoleCommand);
      }
      if (messageCase_ == MessageOneofCase.RoleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(RoleResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (messageCase_ == MessageOneofCase.BotActivity) {
        output.WriteRawTag(10);
        output.WriteMessage(BotActivity);
      }
      if (messageCase_ == MessageOneofCase.ChannelTopic) {
        output.WriteRawTag(18);
        output.WriteMessage(ChannelTopic);
      }
      if (messageCase_ == MessageOneofCase.ChatMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(ChatMessage);
      }
      if (messageCase_ == MessageOneofCase.RoleQuery) {
        output.WriteRawTag(34);
        output.WriteMessage(RoleQuery);
      }
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
        output.WriteRawTag(42);
        output.WriteMessage(SyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
        output.WriteRawTag(50);
        output.WriteMessage(UnsyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.ConsoleCommand) {
        output.WriteRawTag(58);
        output.WriteMessage(ConsoleCommand);
      }
      if (messageCase_ == MessageOneofCase.RoleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(RoleResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.BotActivity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BotActivity);
      }
      if (messageCase_ == MessageOneofCase.ChannelTopic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelTopic);
      }
      if (messageCase_ == MessageOneofCase.ChatMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (messageCase_ == MessageOneofCase.RoleQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleQuery);
      }
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.ConsoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsoleCommand);
      }
      if (messageCase_ == MessageOneofCase.RoleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWrapper other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.BotActivity:
          if (BotActivity == null) {
            BotActivity = new global::SCPDiscord.Interface.BotActivity();
          }
          BotActivity.MergeFrom(other.BotActivity);
          break;
        case MessageOneofCase.ChannelTopic:
          if (ChannelTopic == null) {
            ChannelTopic = new global::SCPDiscord.Interface.ChannelTopic();
          }
          ChannelTopic.MergeFrom(other.ChannelTopic);
          break;
        case MessageOneofCase.ChatMessage:
          if (ChatMessage == null) {
            ChatMessage = new global::SCPDiscord.Interface.ChatMessage();
          }
          ChatMessage.MergeFrom(other.ChatMessage);
          break;
        case MessageOneofCase.RoleQuery:
          if (RoleQuery == null) {
            RoleQuery = new global::SCPDiscord.Interface.RoleQuery();
          }
          RoleQuery.MergeFrom(other.RoleQuery);
          break;
        case MessageOneofCase.SyncRoleCommand:
          if (SyncRoleCommand == null) {
            SyncRoleCommand = new global::SCPDiscord.Interface.SyncRoleCommand();
          }
          SyncRoleCommand.MergeFrom(other.SyncRoleCommand);
          break;
        case MessageOneofCase.UnsyncRoleCommand:
          if (UnsyncRoleCommand == null) {
            UnsyncRoleCommand = new global::SCPDiscord.Interface.UnsyncRoleCommand();
          }
          UnsyncRoleCommand.MergeFrom(other.UnsyncRoleCommand);
          break;
        case MessageOneofCase.ConsoleCommand:
          if (ConsoleCommand == null) {
            ConsoleCommand = new global::SCPDiscord.Interface.ConsoleCommand();
          }
          ConsoleCommand.MergeFrom(other.ConsoleCommand);
          break;
        case MessageOneofCase.RoleResponse:
          if (RoleResponse == null) {
            RoleResponse = new global::SCPDiscord.Interface.RoleResponse();
          }
          RoleResponse.MergeFrom(other.RoleResponse);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::SCPDiscord.Interface.BotActivity subBuilder = new global::SCPDiscord.Interface.BotActivity();
            if (messageCase_ == MessageOneofCase.BotActivity) {
              subBuilder.MergeFrom(BotActivity);
            }
            input.ReadMessage(subBuilder);
            BotActivity = subBuilder;
            break;
          }
          case 18: {
            global::SCPDiscord.Interface.ChannelTopic subBuilder = new global::SCPDiscord.Interface.ChannelTopic();
            if (messageCase_ == MessageOneofCase.ChannelTopic) {
              subBuilder.MergeFrom(ChannelTopic);
            }
            input.ReadMessage(subBuilder);
            ChannelTopic = subBuilder;
            break;
          }
          case 26: {
            global::SCPDiscord.Interface.ChatMessage subBuilder = new global::SCPDiscord.Interface.ChatMessage();
            if (messageCase_ == MessageOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 34: {
            global::SCPDiscord.Interface.RoleQuery subBuilder = new global::SCPDiscord.Interface.RoleQuery();
            if (messageCase_ == MessageOneofCase.RoleQuery) {
              subBuilder.MergeFrom(RoleQuery);
            }
            input.ReadMessage(subBuilder);
            RoleQuery = subBuilder;
            break;
          }
          case 42: {
            global::SCPDiscord.Interface.SyncRoleCommand subBuilder = new global::SCPDiscord.Interface.SyncRoleCommand();
            if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
              subBuilder.MergeFrom(SyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            SyncRoleCommand = subBuilder;
            break;
          }
          case 50: {
            global::SCPDiscord.Interface.UnsyncRoleCommand subBuilder = new global::SCPDiscord.Interface.UnsyncRoleCommand();
            if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
              subBuilder.MergeFrom(UnsyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            UnsyncRoleCommand = subBuilder;
            break;
          }
          case 58: {
            global::SCPDiscord.Interface.ConsoleCommand subBuilder = new global::SCPDiscord.Interface.ConsoleCommand();
            if (messageCase_ == MessageOneofCase.ConsoleCommand) {
              subBuilder.MergeFrom(ConsoleCommand);
            }
            input.ReadMessage(subBuilder);
            ConsoleCommand = subBuilder;
            break;
          }
          case 66: {
            global::SCPDiscord.Interface.RoleResponse subBuilder = new global::SCPDiscord.Interface.RoleResponse();
            if (messageCase_ == MessageOneofCase.RoleResponse) {
              subBuilder.MergeFrom(RoleResponse);
            }
            input.ReadMessage(subBuilder);
            RoleResponse = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::SCPDiscord.Interface.BotActivity subBuilder = new global::SCPDiscord.Interface.BotActivity();
            if (messageCase_ == MessageOneofCase.BotActivity) {
              subBuilder.MergeFrom(BotActivity);
            }
            input.ReadMessage(subBuilder);
            BotActivity = subBuilder;
            break;
          }
          case 18: {
            global::SCPDiscord.Interface.ChannelTopic subBuilder = new global::SCPDiscord.Interface.ChannelTopic();
            if (messageCase_ == MessageOneofCase.ChannelTopic) {
              subBuilder.MergeFrom(ChannelTopic);
            }
            input.ReadMessage(subBuilder);
            ChannelTopic = subBuilder;
            break;
          }
          case 26: {
            global::SCPDiscord.Interface.ChatMessage subBuilder = new global::SCPDiscord.Interface.ChatMessage();
            if (messageCase_ == MessageOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 34: {
            global::SCPDiscord.Interface.RoleQuery subBuilder = new global::SCPDiscord.Interface.RoleQuery();
            if (messageCase_ == MessageOneofCase.RoleQuery) {
              subBuilder.MergeFrom(RoleQuery);
            }
            input.ReadMessage(subBuilder);
            RoleQuery = subBuilder;
            break;
          }
          case 42: {
            global::SCPDiscord.Interface.SyncRoleCommand subBuilder = new global::SCPDiscord.Interface.SyncRoleCommand();
            if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
              subBuilder.MergeFrom(SyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            SyncRoleCommand = subBuilder;
            break;
          }
          case 50: {
            global::SCPDiscord.Interface.UnsyncRoleCommand subBuilder = new global::SCPDiscord.Interface.UnsyncRoleCommand();
            if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
              subBuilder.MergeFrom(UnsyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            UnsyncRoleCommand = subBuilder;
            break;
          }
          case 58: {
            global::SCPDiscord.Interface.ConsoleCommand subBuilder = new global::SCPDiscord.Interface.ConsoleCommand();
            if (messageCase_ == MessageOneofCase.ConsoleCommand) {
              subBuilder.MergeFrom(ConsoleCommand);
            }
            input.ReadMessage(subBuilder);
            ConsoleCommand = subBuilder;
            break;
          }
          case 66: {
            global::SCPDiscord.Interface.RoleResponse subBuilder = new global::SCPDiscord.Interface.RoleResponse();
            if (messageCase_ == MessageOneofCase.RoleResponse) {
              subBuilder.MergeFrom(RoleResponse);
            }
            input.ReadMessage(subBuilder);
            RoleResponse = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
