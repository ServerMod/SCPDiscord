// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BotToPlugin/BanCommand.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SCPDiscord.Interface {

  /// <summary>Holder for reflection information generated from BotToPlugin/BanCommand.proto</summary>
  public static partial class BanCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for BotToPlugin/BanCommand.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BanCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxCb3RUb1BsdWdpbi9CYW5Db21tYW5kLnByb3RvEhRTQ1BEaXNjb3JkLklu",
            "dGVyZmFjZSJkCgpCYW5Db21tYW5kEhEKCUNoYW5uZWxJRBgBIAEoBBIPCgdT",
            "dGVhbUlEGAIgASgEEhAKCER1cmF0aW9uGAMgASgJEg4KBlJlYXNvbhgEIAEo",
            "CRIQCghBZG1pblRhZxgFIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SCPDiscord.Interface.BanCommand), global::SCPDiscord.Interface.BanCommand.Parser, new[]{ "ChannelID", "SteamID", "Duration", "Reason", "AdminTag" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BanCommand : pb::IMessage<BanCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BanCommand> _parser = new pb::MessageParser<BanCommand>(() => new BanCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BanCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SCPDiscord.Interface.BanCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanCommand(BanCommand other) : this() {
      channelID_ = other.channelID_;
      steamID_ = other.steamID_;
      duration_ = other.duration_;
      reason_ = other.reason_;
      adminTag_ = other.adminTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanCommand Clone() {
      return new BanCommand(this);
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 1;
    private ulong channelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelID {
      get { return channelID_; }
      set {
        channelID_ = value;
      }
    }

    /// <summary>Field number for the "SteamID" field.</summary>
    public const int SteamIDFieldNumber = 2;
    private ulong steamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamID {
      get { return steamID_; }
      set {
        steamID_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private string duration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Duration {
      get { return duration_; }
      set {
        duration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdminTag" field.</summary>
    public const int AdminTagFieldNumber = 5;
    private string adminTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminTag {
      get { return adminTag_; }
      set {
        adminTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BanCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BanCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelID != other.ChannelID) return false;
      if (SteamID != other.SteamID) return false;
      if (Duration != other.Duration) return false;
      if (Reason != other.Reason) return false;
      if (AdminTag != other.AdminTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelID != 0UL) hash ^= ChannelID.GetHashCode();
      if (SteamID != 0UL) hash ^= SteamID.GetHashCode();
      if (Duration.Length != 0) hash ^= Duration.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (AdminTag.Length != 0) hash ^= AdminTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelID);
      }
      if (SteamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SteamID);
      }
      if (Duration.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Duration);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (AdminTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdminTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelID);
      }
      if (SteamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SteamID);
      }
      if (Duration.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Duration);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (AdminTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdminTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelID);
      }
      if (SteamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SteamID);
      }
      if (Duration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Duration);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (AdminTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BanCommand other) {
      if (other == null) {
        return;
      }
      if (other.ChannelID != 0UL) {
        ChannelID = other.ChannelID;
      }
      if (other.SteamID != 0UL) {
        SteamID = other.SteamID;
      }
      if (other.Duration.Length != 0) {
        Duration = other.Duration;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.AdminTag.Length != 0) {
        AdminTag = other.AdminTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelID = input.ReadUInt64();
            break;
          }
          case 16: {
            SteamID = input.ReadUInt64();
            break;
          }
          case 26: {
            Duration = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 42: {
            AdminTag = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChannelID = input.ReadUInt64();
            break;
          }
          case 16: {
            SteamID = input.ReadUInt64();
            break;
          }
          case 26: {
            Duration = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 42: {
            AdminTag = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
