// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BotToPlugin/UserInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SCPDiscord.Interface {

  /// <summary>Holder for reflection information generated from BotToPlugin/UserInfo.proto</summary>
  public static partial class UserInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for BotToPlugin/UserInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpCb3RUb1BsdWdpbi9Vc2VySW5mby5wcm90bxIUU0NQRGlzY29yZC5JbnRl",
            "cmZhY2UiogEKCFVzZXJJbmZvEhMKC1N0ZWFtSURPcklQGAEgASgJEhEKCURp",
            "c2NvcmRJRBgCIAEoBBIPCgdSb2xlSURzGAMgAygEEhoKEkRpc2NvcmREaXNw",
            "bGF5TmFtZRgEIAEoCRIXCg9EaXNjb3JkVXNlcm5hbWUYBSABKAkSKAogRGlz",
            "Y29yZFVzZXJuYW1lV2l0aERpc2NyaW1pbmF0b3IYBiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SCPDiscord.Interface.UserInfo), global::SCPDiscord.Interface.UserInfo.Parser, new[]{ "SteamIDOrIP", "DiscordID", "RoleIDs", "DiscordDisplayName", "DiscordUsername", "DiscordUsernameWithDiscriminator" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserInfo : pb::IMessage<UserInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SCPDiscord.Interface.UserInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserInfo(UserInfo other) : this() {
      steamIDOrIP_ = other.steamIDOrIP_;
      discordID_ = other.discordID_;
      roleIDs_ = other.roleIDs_.Clone();
      discordDisplayName_ = other.discordDisplayName_;
      discordUsername_ = other.discordUsername_;
      discordUsernameWithDiscriminator_ = other.discordUsernameWithDiscriminator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "SteamIDOrIP" field.</summary>
    public const int SteamIDOrIPFieldNumber = 1;
    private string steamIDOrIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SteamIDOrIP {
      get { return steamIDOrIP_; }
      set {
        steamIDOrIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiscordID" field.</summary>
    public const int DiscordIDFieldNumber = 2;
    private ulong discordID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong DiscordID {
      get { return discordID_; }
      set {
        discordID_ = value;
      }
    }

    /// <summary>Field number for the "RoleIDs" field.</summary>
    public const int RoleIDsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_roleIDs_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> roleIDs_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> RoleIDs {
      get { return roleIDs_; }
    }

    /// <summary>Field number for the "DiscordDisplayName" field.</summary>
    public const int DiscordDisplayNameFieldNumber = 4;
    private string discordDisplayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscordDisplayName {
      get { return discordDisplayName_; }
      set {
        discordDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiscordUsername" field.</summary>
    public const int DiscordUsernameFieldNumber = 5;
    private string discordUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscordUsername {
      get { return discordUsername_; }
      set {
        discordUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiscordUsernameWithDiscriminator" field.</summary>
    public const int DiscordUsernameWithDiscriminatorFieldNumber = 6;
    private string discordUsernameWithDiscriminator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscordUsernameWithDiscriminator {
      get { return discordUsernameWithDiscriminator_; }
      set {
        discordUsernameWithDiscriminator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamIDOrIP != other.SteamIDOrIP) return false;
      if (DiscordID != other.DiscordID) return false;
      if(!roleIDs_.Equals(other.roleIDs_)) return false;
      if (DiscordDisplayName != other.DiscordDisplayName) return false;
      if (DiscordUsername != other.DiscordUsername) return false;
      if (DiscordUsernameWithDiscriminator != other.DiscordUsernameWithDiscriminator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamIDOrIP.Length != 0) hash ^= SteamIDOrIP.GetHashCode();
      if (DiscordID != 0UL) hash ^= DiscordID.GetHashCode();
      hash ^= roleIDs_.GetHashCode();
      if (DiscordDisplayName.Length != 0) hash ^= DiscordDisplayName.GetHashCode();
      if (DiscordUsername.Length != 0) hash ^= DiscordUsername.GetHashCode();
      if (DiscordUsernameWithDiscriminator.Length != 0) hash ^= DiscordUsernameWithDiscriminator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SteamIDOrIP.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamIDOrIP);
      }
      if (DiscordID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DiscordID);
      }
      roleIDs_.WriteTo(output, _repeated_roleIDs_codec);
      if (DiscordDisplayName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DiscordDisplayName);
      }
      if (DiscordUsername.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DiscordUsername);
      }
      if (DiscordUsernameWithDiscriminator.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DiscordUsernameWithDiscriminator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SteamIDOrIP.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamIDOrIP);
      }
      if (DiscordID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DiscordID);
      }
      roleIDs_.WriteTo(ref output, _repeated_roleIDs_codec);
      if (DiscordDisplayName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DiscordDisplayName);
      }
      if (DiscordUsername.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DiscordUsername);
      }
      if (DiscordUsernameWithDiscriminator.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DiscordUsernameWithDiscriminator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SteamIDOrIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamIDOrIP);
      }
      if (DiscordID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DiscordID);
      }
      size += roleIDs_.CalculateSize(_repeated_roleIDs_codec);
      if (DiscordDisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscordDisplayName);
      }
      if (DiscordUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscordUsername);
      }
      if (DiscordUsernameWithDiscriminator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscordUsernameWithDiscriminator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.SteamIDOrIP.Length != 0) {
        SteamIDOrIP = other.SteamIDOrIP;
      }
      if (other.DiscordID != 0UL) {
        DiscordID = other.DiscordID;
      }
      roleIDs_.Add(other.roleIDs_);
      if (other.DiscordDisplayName.Length != 0) {
        DiscordDisplayName = other.DiscordDisplayName;
      }
      if (other.DiscordUsername.Length != 0) {
        DiscordUsername = other.DiscordUsername;
      }
      if (other.DiscordUsernameWithDiscriminator.Length != 0) {
        DiscordUsernameWithDiscriminator = other.DiscordUsernameWithDiscriminator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SteamIDOrIP = input.ReadString();
            break;
          }
          case 16: {
            DiscordID = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            roleIDs_.AddEntriesFrom(input, _repeated_roleIDs_codec);
            break;
          }
          case 34: {
            DiscordDisplayName = input.ReadString();
            break;
          }
          case 42: {
            DiscordUsername = input.ReadString();
            break;
          }
          case 50: {
            DiscordUsernameWithDiscriminator = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SteamIDOrIP = input.ReadString();
            break;
          }
          case 16: {
            DiscordID = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            roleIDs_.AddEntriesFrom(ref input, _repeated_roleIDs_codec);
            break;
          }
          case 34: {
            DiscordDisplayName = input.ReadString();
            break;
          }
          case 42: {
            DiscordUsername = input.ReadString();
            break;
          }
          case 50: {
            DiscordUsernameWithDiscriminator = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
