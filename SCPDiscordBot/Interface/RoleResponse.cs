// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BotToPlugin/RoleResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SCPDiscord.Interface {

  /// <summary>Holder for reflection information generated from BotToPlugin/RoleResponse.proto</summary>
  public static partial class RoleResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for BotToPlugin/RoleResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoleResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5Cb3RUb1BsdWdpbi9Sb2xlUmVzcG9uc2UucHJvdG8SFFNDUERpc2NvcmQu",
            "SW50ZXJmYWNlIkMKDFJvbGVSZXNwb25zZRIPCgdTdGVhbUlEGAEgASgEEhEK",
            "CURpc2NvcmRJRBgCIAEoBBIPCgdSb2xlSURzGAMgAygEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SCPDiscord.Interface.RoleResponse), global::SCPDiscord.Interface.RoleResponse.Parser, new[]{ "SteamID", "DiscordID", "RoleIDs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoleResponse : pb::IMessage<RoleResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoleResponse> _parser = new pb::MessageParser<RoleResponse>(() => new RoleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SCPDiscord.Interface.RoleResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleResponse(RoleResponse other) : this() {
      steamID_ = other.steamID_;
      discordID_ = other.discordID_;
      roleIDs_ = other.roleIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleResponse Clone() {
      return new RoleResponse(this);
    }

    /// <summary>Field number for the "SteamID" field.</summary>
    public const int SteamIDFieldNumber = 1;
    private ulong steamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamID {
      get { return steamID_; }
      set {
        steamID_ = value;
      }
    }

    /// <summary>Field number for the "DiscordID" field.</summary>
    public const int DiscordIDFieldNumber = 2;
    private ulong discordID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DiscordID {
      get { return discordID_; }
      set {
        discordID_ = value;
      }
    }

    /// <summary>Field number for the "RoleIDs" field.</summary>
    public const int RoleIDsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_roleIDs_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> roleIDs_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleIDs {
      get { return roleIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamID != other.SteamID) return false;
      if (DiscordID != other.DiscordID) return false;
      if(!roleIDs_.Equals(other.roleIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamID != 0UL) hash ^= SteamID.GetHashCode();
      if (DiscordID != 0UL) hash ^= DiscordID.GetHashCode();
      hash ^= roleIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SteamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SteamID);
      }
      if (DiscordID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DiscordID);
      }
      roleIDs_.WriteTo(output, _repeated_roleIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SteamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SteamID);
      }
      if (DiscordID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DiscordID);
      }
      roleIDs_.WriteTo(ref output, _repeated_roleIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SteamID);
      }
      if (DiscordID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DiscordID);
      }
      size += roleIDs_.CalculateSize(_repeated_roleIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleResponse other) {
      if (other == null) {
        return;
      }
      if (other.SteamID != 0UL) {
        SteamID = other.SteamID;
      }
      if (other.DiscordID != 0UL) {
        DiscordID = other.DiscordID;
      }
      roleIDs_.Add(other.roleIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SteamID = input.ReadUInt64();
            break;
          }
          case 16: {
            DiscordID = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            roleIDs_.AddEntriesFrom(input, _repeated_roleIDs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SteamID = input.ReadUInt64();
            break;
          }
          case 16: {
            DiscordID = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            roleIDs_.AddEntriesFrom(ref input, _repeated_roleIDs_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
