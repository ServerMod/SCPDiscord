// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message_wrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SCPDiscord.Interface {

  /// <summary>Holder for reflection information generated from message_wrapper.proto</summary>
  public static partial class MessageWrapperReflection {

    #region Descriptor
    /// <summary>File descriptor for message_wrapper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageWrapperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXNzYWdlX3dyYXBwZXIucHJvdG8SFFNDUERpc2NvcmQuSW50ZXJmYWNl",
            "GiBCb3RUb1BsdWdpbi9Db25zb2xlQ29tbWFuZC5wcm90bxoeQm90VG9QbHVn",
            "aW4vUm9sZVJlc3BvbnNlLnByb3RvGiFCb3RUb1BsdWdpbi9TeW5jUm9sZUNv",
            "bW1hbmQucHJvdG8aI0JvdFRvUGx1Z2luL1Vuc3luY1JvbGVDb21tYW5kLnBy",
            "b3RvGhxCb3RUb1BsdWdpbi9CYW5Db21tYW5kLnByb3RvGh5Cb3RUb1BsdWdp",
            "bi9VbmJhbkNvbW1hbmQucHJvdG8aHUJvdFRvUGx1Z2luL0tpY2tDb21tYW5k",
            "LnByb3RvGiBCb3RUb1BsdWdpbi9LaWNrYWxsQ29tbWFuZC5wcm90bxodQm90",
            "VG9QbHVnaW4vTGlzdENvbW1hbmQucHJvdG8aHVBsdWdpblRvQm90L0JvdEFj",
            "dGl2aXR5LnByb3RvGh1QbHVnaW5Ub0JvdC9DaGF0TWVzc2FnZS5wcm90bxob",
            "UGx1Z2luVG9Cb3QvUm9sZVF1ZXJ5LnByb3RvIvEFCg5NZXNzYWdlV3JhcHBl",
            "chI4Cgtib3RBY3Rpdml0eRgBIAEoCzIhLlNDUERpc2NvcmQuSW50ZXJmYWNl",
            "LkJvdEFjdGl2aXR5SAASOAoLY2hhdE1lc3NhZ2UYAyABKAsyIS5TQ1BEaXNj",
            "b3JkLkludGVyZmFjZS5DaGF0TWVzc2FnZUgAEjQKCXJvbGVRdWVyeRgEIAEo",
            "CzIfLlNDUERpc2NvcmQuSW50ZXJmYWNlLlJvbGVRdWVyeUgAEkAKD3N5bmNS",
            "b2xlQ29tbWFuZBgFIAEoCzIlLlNDUERpc2NvcmQuSW50ZXJmYWNlLlN5bmNS",
            "b2xlQ29tbWFuZEgAEkQKEXVuc3luY1JvbGVDb21tYW5kGAYgASgLMicuU0NQ",
            "RGlzY29yZC5JbnRlcmZhY2UuVW5zeW5jUm9sZUNvbW1hbmRIABI+Cg5jb25z",
            "b2xlQ29tbWFuZBgHIAEoCzIkLlNDUERpc2NvcmQuSW50ZXJmYWNlLkNvbnNv",
            "bGVDb21tYW5kSAASOgoMcm9sZVJlc3BvbnNlGAggASgLMiIuU0NQRGlzY29y",
            "ZC5JbnRlcmZhY2UuUm9sZVJlc3BvbnNlSAASNgoKQmFuQ29tbWFuZBgJIAEo",
            "CzIgLlNDUERpc2NvcmQuSW50ZXJmYWNlLkJhbkNvbW1hbmRIABI6CgxVbmJh",
            "bkNvbW1hbmQYCiABKAsyIi5TQ1BEaXNjb3JkLkludGVyZmFjZS5VbmJhbkNv",
            "bW1hbmRIABI4CgtLaWNrQ29tbWFuZBgLIAEoCzIhLlNDUERpc2NvcmQuSW50",
            "ZXJmYWNlLktpY2tDb21tYW5kSAASPgoOS2lja2FsbENvbW1hbmQYDCABKAsy",
            "JC5TQ1BEaXNjb3JkLkludGVyZmFjZS5LaWNrYWxsQ29tbWFuZEgAEjgKC0xp",
            "c3RDb21tYW5kGA0gASgLMiEuU0NQRGlzY29yZC5JbnRlcmZhY2UuTGlzdENv",
            "bW1hbmRIAEIJCgdtZXNzYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SCPDiscord.Interface.ConsoleCommandReflection.Descriptor, global::SCPDiscord.Interface.RoleResponseReflection.Descriptor, global::SCPDiscord.Interface.SyncRoleCommandReflection.Descriptor, global::SCPDiscord.Interface.UnsyncRoleCommandReflection.Descriptor, global::SCPDiscord.Interface.BanCommandReflection.Descriptor, global::SCPDiscord.Interface.UnbanCommandReflection.Descriptor, global::SCPDiscord.Interface.KickCommandReflection.Descriptor, global::SCPDiscord.Interface.KickallCommandReflection.Descriptor, global::SCPDiscord.Interface.ListCommandReflection.Descriptor, global::SCPDiscord.Interface.BotActivityReflection.Descriptor, global::SCPDiscord.Interface.ChatMessageReflection.Descriptor, global::SCPDiscord.Interface.RoleQueryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SCPDiscord.Interface.MessageWrapper), global::SCPDiscord.Interface.MessageWrapper.Parser, new[]{ "BotActivity", "ChatMessage", "RoleQuery", "SyncRoleCommand", "UnsyncRoleCommand", "ConsoleCommand", "RoleResponse", "BanCommand", "UnbanCommand", "KickCommand", "KickallCommand", "ListCommand" }, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MessageWrapper : pb::IMessage<MessageWrapper>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessageWrapper> _parser = new pb::MessageParser<MessageWrapper>(() => new MessageWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MessageWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SCPDiscord.Interface.MessageWrapperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageWrapper(MessageWrapper other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.BotActivity:
          BotActivity = other.BotActivity.Clone();
          break;
        case MessageOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage.Clone();
          break;
        case MessageOneofCase.RoleQuery:
          RoleQuery = other.RoleQuery.Clone();
          break;
        case MessageOneofCase.SyncRoleCommand:
          SyncRoleCommand = other.SyncRoleCommand.Clone();
          break;
        case MessageOneofCase.UnsyncRoleCommand:
          UnsyncRoleCommand = other.UnsyncRoleCommand.Clone();
          break;
        case MessageOneofCase.ConsoleCommand:
          ConsoleCommand = other.ConsoleCommand.Clone();
          break;
        case MessageOneofCase.RoleResponse:
          RoleResponse = other.RoleResponse.Clone();
          break;
        case MessageOneofCase.BanCommand:
          BanCommand = other.BanCommand.Clone();
          break;
        case MessageOneofCase.UnbanCommand:
          UnbanCommand = other.UnbanCommand.Clone();
          break;
        case MessageOneofCase.KickCommand:
          KickCommand = other.KickCommand.Clone();
          break;
        case MessageOneofCase.KickallCommand:
          KickallCommand = other.KickallCommand.Clone();
          break;
        case MessageOneofCase.ListCommand:
          ListCommand = other.ListCommand.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageWrapper Clone() {
      return new MessageWrapper(this);
    }

    /// <summary>Field number for the "botActivity" field.</summary>
    public const int BotActivityFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.BotActivity BotActivity {
      get { return messageCase_ == MessageOneofCase.BotActivity ? (global::SCPDiscord.Interface.BotActivity) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.BotActivity;
      }
    }

    /// <summary>Field number for the "chatMessage" field.</summary>
    public const int ChatMessageFieldNumber = 3;
    /// <summary>
    ///ChannelTopic channelTopic = 2; // No longer exists
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.ChatMessage ChatMessage {
      get { return messageCase_ == MessageOneofCase.ChatMessage ? (global::SCPDiscord.Interface.ChatMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChatMessage;
      }
    }

    /// <summary>Field number for the "roleQuery" field.</summary>
    public const int RoleQueryFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.RoleQuery RoleQuery {
      get { return messageCase_ == MessageOneofCase.RoleQuery ? (global::SCPDiscord.Interface.RoleQuery) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RoleQuery;
      }
    }

    /// <summary>Field number for the "syncRoleCommand" field.</summary>
    public const int SyncRoleCommandFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.SyncRoleCommand SyncRoleCommand {
      get { return messageCase_ == MessageOneofCase.SyncRoleCommand ? (global::SCPDiscord.Interface.SyncRoleCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SyncRoleCommand;
      }
    }

    /// <summary>Field number for the "unsyncRoleCommand" field.</summary>
    public const int UnsyncRoleCommandFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.UnsyncRoleCommand UnsyncRoleCommand {
      get { return messageCase_ == MessageOneofCase.UnsyncRoleCommand ? (global::SCPDiscord.Interface.UnsyncRoleCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UnsyncRoleCommand;
      }
    }

    /// <summary>Field number for the "consoleCommand" field.</summary>
    public const int ConsoleCommandFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.ConsoleCommand ConsoleCommand {
      get { return messageCase_ == MessageOneofCase.ConsoleCommand ? (global::SCPDiscord.Interface.ConsoleCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ConsoleCommand;
      }
    }

    /// <summary>Field number for the "roleResponse" field.</summary>
    public const int RoleResponseFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.RoleResponse RoleResponse {
      get { return messageCase_ == MessageOneofCase.RoleResponse ? (global::SCPDiscord.Interface.RoleResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RoleResponse;
      }
    }

    /// <summary>Field number for the "BanCommand" field.</summary>
    public const int BanCommandFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.BanCommand BanCommand {
      get { return messageCase_ == MessageOneofCase.BanCommand ? (global::SCPDiscord.Interface.BanCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.BanCommand;
      }
    }

    /// <summary>Field number for the "UnbanCommand" field.</summary>
    public const int UnbanCommandFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.UnbanCommand UnbanCommand {
      get { return messageCase_ == MessageOneofCase.UnbanCommand ? (global::SCPDiscord.Interface.UnbanCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UnbanCommand;
      }
    }

    /// <summary>Field number for the "KickCommand" field.</summary>
    public const int KickCommandFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.KickCommand KickCommand {
      get { return messageCase_ == MessageOneofCase.KickCommand ? (global::SCPDiscord.Interface.KickCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.KickCommand;
      }
    }

    /// <summary>Field number for the "KickallCommand" field.</summary>
    public const int KickallCommandFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.KickallCommand KickallCommand {
      get { return messageCase_ == MessageOneofCase.KickallCommand ? (global::SCPDiscord.Interface.KickallCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.KickallCommand;
      }
    }

    /// <summary>Field number for the "ListCommand" field.</summary>
    public const int ListCommandFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SCPDiscord.Interface.ListCommand ListCommand {
      get { return messageCase_ == MessageOneofCase.ListCommand ? (global::SCPDiscord.Interface.ListCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ListCommand;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      BotActivity = 1,
      ChatMessage = 3,
      RoleQuery = 4,
      SyncRoleCommand = 5,
      UnsyncRoleCommand = 6,
      ConsoleCommand = 7,
      RoleResponse = 8,
      BanCommand = 9,
      UnbanCommand = 10,
      KickCommand = 11,
      KickallCommand = 12,
      ListCommand = 13,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MessageWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MessageWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BotActivity, other.BotActivity)) return false;
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (!object.Equals(RoleQuery, other.RoleQuery)) return false;
      if (!object.Equals(SyncRoleCommand, other.SyncRoleCommand)) return false;
      if (!object.Equals(UnsyncRoleCommand, other.UnsyncRoleCommand)) return false;
      if (!object.Equals(ConsoleCommand, other.ConsoleCommand)) return false;
      if (!object.Equals(RoleResponse, other.RoleResponse)) return false;
      if (!object.Equals(BanCommand, other.BanCommand)) return false;
      if (!object.Equals(UnbanCommand, other.UnbanCommand)) return false;
      if (!object.Equals(KickCommand, other.KickCommand)) return false;
      if (!object.Equals(KickallCommand, other.KickallCommand)) return false;
      if (!object.Equals(ListCommand, other.ListCommand)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.BotActivity) hash ^= BotActivity.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChatMessage) hash ^= ChatMessage.GetHashCode();
      if (messageCase_ == MessageOneofCase.RoleQuery) hash ^= RoleQuery.GetHashCode();
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) hash ^= SyncRoleCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) hash ^= UnsyncRoleCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.ConsoleCommand) hash ^= ConsoleCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.RoleResponse) hash ^= RoleResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.BanCommand) hash ^= BanCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.UnbanCommand) hash ^= UnbanCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.KickCommand) hash ^= KickCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.KickallCommand) hash ^= KickallCommand.GetHashCode();
      if (messageCase_ == MessageOneofCase.ListCommand) hash ^= ListCommand.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (messageCase_ == MessageOneofCase.BotActivity) {
        output.WriteRawTag(10);
        output.WriteMessage(BotActivity);
      }
      if (messageCase_ == MessageOneofCase.ChatMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(ChatMessage);
      }
      if (messageCase_ == MessageOneofCase.RoleQuery) {
        output.WriteRawTag(34);
        output.WriteMessage(RoleQuery);
      }
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
        output.WriteRawTag(42);
        output.WriteMessage(SyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
        output.WriteRawTag(50);
        output.WriteMessage(UnsyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.ConsoleCommand) {
        output.WriteRawTag(58);
        output.WriteMessage(ConsoleCommand);
      }
      if (messageCase_ == MessageOneofCase.RoleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(RoleResponse);
      }
      if (messageCase_ == MessageOneofCase.BanCommand) {
        output.WriteRawTag(74);
        output.WriteMessage(BanCommand);
      }
      if (messageCase_ == MessageOneofCase.UnbanCommand) {
        output.WriteRawTag(82);
        output.WriteMessage(UnbanCommand);
      }
      if (messageCase_ == MessageOneofCase.KickCommand) {
        output.WriteRawTag(90);
        output.WriteMessage(KickCommand);
      }
      if (messageCase_ == MessageOneofCase.KickallCommand) {
        output.WriteRawTag(98);
        output.WriteMessage(KickallCommand);
      }
      if (messageCase_ == MessageOneofCase.ListCommand) {
        output.WriteRawTag(106);
        output.WriteMessage(ListCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (messageCase_ == MessageOneofCase.BotActivity) {
        output.WriteRawTag(10);
        output.WriteMessage(BotActivity);
      }
      if (messageCase_ == MessageOneofCase.ChatMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(ChatMessage);
      }
      if (messageCase_ == MessageOneofCase.RoleQuery) {
        output.WriteRawTag(34);
        output.WriteMessage(RoleQuery);
      }
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
        output.WriteRawTag(42);
        output.WriteMessage(SyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
        output.WriteRawTag(50);
        output.WriteMessage(UnsyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.ConsoleCommand) {
        output.WriteRawTag(58);
        output.WriteMessage(ConsoleCommand);
      }
      if (messageCase_ == MessageOneofCase.RoleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(RoleResponse);
      }
      if (messageCase_ == MessageOneofCase.BanCommand) {
        output.WriteRawTag(74);
        output.WriteMessage(BanCommand);
      }
      if (messageCase_ == MessageOneofCase.UnbanCommand) {
        output.WriteRawTag(82);
        output.WriteMessage(UnbanCommand);
      }
      if (messageCase_ == MessageOneofCase.KickCommand) {
        output.WriteRawTag(90);
        output.WriteMessage(KickCommand);
      }
      if (messageCase_ == MessageOneofCase.KickallCommand) {
        output.WriteRawTag(98);
        output.WriteMessage(KickallCommand);
      }
      if (messageCase_ == MessageOneofCase.ListCommand) {
        output.WriteRawTag(106);
        output.WriteMessage(ListCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.BotActivity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BotActivity);
      }
      if (messageCase_ == MessageOneofCase.ChatMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (messageCase_ == MessageOneofCase.RoleQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleQuery);
      }
      if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsyncRoleCommand);
      }
      if (messageCase_ == MessageOneofCase.ConsoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsoleCommand);
      }
      if (messageCase_ == MessageOneofCase.RoleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleResponse);
      }
      if (messageCase_ == MessageOneofCase.BanCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BanCommand);
      }
      if (messageCase_ == MessageOneofCase.UnbanCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnbanCommand);
      }
      if (messageCase_ == MessageOneofCase.KickCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KickCommand);
      }
      if (messageCase_ == MessageOneofCase.KickallCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KickallCommand);
      }
      if (messageCase_ == MessageOneofCase.ListCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MessageWrapper other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.BotActivity:
          if (BotActivity == null) {
            BotActivity = new global::SCPDiscord.Interface.BotActivity();
          }
          BotActivity.MergeFrom(other.BotActivity);
          break;
        case MessageOneofCase.ChatMessage:
          if (ChatMessage == null) {
            ChatMessage = new global::SCPDiscord.Interface.ChatMessage();
          }
          ChatMessage.MergeFrom(other.ChatMessage);
          break;
        case MessageOneofCase.RoleQuery:
          if (RoleQuery == null) {
            RoleQuery = new global::SCPDiscord.Interface.RoleQuery();
          }
          RoleQuery.MergeFrom(other.RoleQuery);
          break;
        case MessageOneofCase.SyncRoleCommand:
          if (SyncRoleCommand == null) {
            SyncRoleCommand = new global::SCPDiscord.Interface.SyncRoleCommand();
          }
          SyncRoleCommand.MergeFrom(other.SyncRoleCommand);
          break;
        case MessageOneofCase.UnsyncRoleCommand:
          if (UnsyncRoleCommand == null) {
            UnsyncRoleCommand = new global::SCPDiscord.Interface.UnsyncRoleCommand();
          }
          UnsyncRoleCommand.MergeFrom(other.UnsyncRoleCommand);
          break;
        case MessageOneofCase.ConsoleCommand:
          if (ConsoleCommand == null) {
            ConsoleCommand = new global::SCPDiscord.Interface.ConsoleCommand();
          }
          ConsoleCommand.MergeFrom(other.ConsoleCommand);
          break;
        case MessageOneofCase.RoleResponse:
          if (RoleResponse == null) {
            RoleResponse = new global::SCPDiscord.Interface.RoleResponse();
          }
          RoleResponse.MergeFrom(other.RoleResponse);
          break;
        case MessageOneofCase.BanCommand:
          if (BanCommand == null) {
            BanCommand = new global::SCPDiscord.Interface.BanCommand();
          }
          BanCommand.MergeFrom(other.BanCommand);
          break;
        case MessageOneofCase.UnbanCommand:
          if (UnbanCommand == null) {
            UnbanCommand = new global::SCPDiscord.Interface.UnbanCommand();
          }
          UnbanCommand.MergeFrom(other.UnbanCommand);
          break;
        case MessageOneofCase.KickCommand:
          if (KickCommand == null) {
            KickCommand = new global::SCPDiscord.Interface.KickCommand();
          }
          KickCommand.MergeFrom(other.KickCommand);
          break;
        case MessageOneofCase.KickallCommand:
          if (KickallCommand == null) {
            KickallCommand = new global::SCPDiscord.Interface.KickallCommand();
          }
          KickallCommand.MergeFrom(other.KickallCommand);
          break;
        case MessageOneofCase.ListCommand:
          if (ListCommand == null) {
            ListCommand = new global::SCPDiscord.Interface.ListCommand();
          }
          ListCommand.MergeFrom(other.ListCommand);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::SCPDiscord.Interface.BotActivity subBuilder = new global::SCPDiscord.Interface.BotActivity();
            if (messageCase_ == MessageOneofCase.BotActivity) {
              subBuilder.MergeFrom(BotActivity);
            }
            input.ReadMessage(subBuilder);
            BotActivity = subBuilder;
            break;
          }
          case 26: {
            global::SCPDiscord.Interface.ChatMessage subBuilder = new global::SCPDiscord.Interface.ChatMessage();
            if (messageCase_ == MessageOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 34: {
            global::SCPDiscord.Interface.RoleQuery subBuilder = new global::SCPDiscord.Interface.RoleQuery();
            if (messageCase_ == MessageOneofCase.RoleQuery) {
              subBuilder.MergeFrom(RoleQuery);
            }
            input.ReadMessage(subBuilder);
            RoleQuery = subBuilder;
            break;
          }
          case 42: {
            global::SCPDiscord.Interface.SyncRoleCommand subBuilder = new global::SCPDiscord.Interface.SyncRoleCommand();
            if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
              subBuilder.MergeFrom(SyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            SyncRoleCommand = subBuilder;
            break;
          }
          case 50: {
            global::SCPDiscord.Interface.UnsyncRoleCommand subBuilder = new global::SCPDiscord.Interface.UnsyncRoleCommand();
            if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
              subBuilder.MergeFrom(UnsyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            UnsyncRoleCommand = subBuilder;
            break;
          }
          case 58: {
            global::SCPDiscord.Interface.ConsoleCommand subBuilder = new global::SCPDiscord.Interface.ConsoleCommand();
            if (messageCase_ == MessageOneofCase.ConsoleCommand) {
              subBuilder.MergeFrom(ConsoleCommand);
            }
            input.ReadMessage(subBuilder);
            ConsoleCommand = subBuilder;
            break;
          }
          case 66: {
            global::SCPDiscord.Interface.RoleResponse subBuilder = new global::SCPDiscord.Interface.RoleResponse();
            if (messageCase_ == MessageOneofCase.RoleResponse) {
              subBuilder.MergeFrom(RoleResponse);
            }
            input.ReadMessage(subBuilder);
            RoleResponse = subBuilder;
            break;
          }
          case 74: {
            global::SCPDiscord.Interface.BanCommand subBuilder = new global::SCPDiscord.Interface.BanCommand();
            if (messageCase_ == MessageOneofCase.BanCommand) {
              subBuilder.MergeFrom(BanCommand);
            }
            input.ReadMessage(subBuilder);
            BanCommand = subBuilder;
            break;
          }
          case 82: {
            global::SCPDiscord.Interface.UnbanCommand subBuilder = new global::SCPDiscord.Interface.UnbanCommand();
            if (messageCase_ == MessageOneofCase.UnbanCommand) {
              subBuilder.MergeFrom(UnbanCommand);
            }
            input.ReadMessage(subBuilder);
            UnbanCommand = subBuilder;
            break;
          }
          case 90: {
            global::SCPDiscord.Interface.KickCommand subBuilder = new global::SCPDiscord.Interface.KickCommand();
            if (messageCase_ == MessageOneofCase.KickCommand) {
              subBuilder.MergeFrom(KickCommand);
            }
            input.ReadMessage(subBuilder);
            KickCommand = subBuilder;
            break;
          }
          case 98: {
            global::SCPDiscord.Interface.KickallCommand subBuilder = new global::SCPDiscord.Interface.KickallCommand();
            if (messageCase_ == MessageOneofCase.KickallCommand) {
              subBuilder.MergeFrom(KickallCommand);
            }
            input.ReadMessage(subBuilder);
            KickallCommand = subBuilder;
            break;
          }
          case 106: {
            global::SCPDiscord.Interface.ListCommand subBuilder = new global::SCPDiscord.Interface.ListCommand();
            if (messageCase_ == MessageOneofCase.ListCommand) {
              subBuilder.MergeFrom(ListCommand);
            }
            input.ReadMessage(subBuilder);
            ListCommand = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::SCPDiscord.Interface.BotActivity subBuilder = new global::SCPDiscord.Interface.BotActivity();
            if (messageCase_ == MessageOneofCase.BotActivity) {
              subBuilder.MergeFrom(BotActivity);
            }
            input.ReadMessage(subBuilder);
            BotActivity = subBuilder;
            break;
          }
          case 26: {
            global::SCPDiscord.Interface.ChatMessage subBuilder = new global::SCPDiscord.Interface.ChatMessage();
            if (messageCase_ == MessageOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 34: {
            global::SCPDiscord.Interface.RoleQuery subBuilder = new global::SCPDiscord.Interface.RoleQuery();
            if (messageCase_ == MessageOneofCase.RoleQuery) {
              subBuilder.MergeFrom(RoleQuery);
            }
            input.ReadMessage(subBuilder);
            RoleQuery = subBuilder;
            break;
          }
          case 42: {
            global::SCPDiscord.Interface.SyncRoleCommand subBuilder = new global::SCPDiscord.Interface.SyncRoleCommand();
            if (messageCase_ == MessageOneofCase.SyncRoleCommand) {
              subBuilder.MergeFrom(SyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            SyncRoleCommand = subBuilder;
            break;
          }
          case 50: {
            global::SCPDiscord.Interface.UnsyncRoleCommand subBuilder = new global::SCPDiscord.Interface.UnsyncRoleCommand();
            if (messageCase_ == MessageOneofCase.UnsyncRoleCommand) {
              subBuilder.MergeFrom(UnsyncRoleCommand);
            }
            input.ReadMessage(subBuilder);
            UnsyncRoleCommand = subBuilder;
            break;
          }
          case 58: {
            global::SCPDiscord.Interface.ConsoleCommand subBuilder = new global::SCPDiscord.Interface.ConsoleCommand();
            if (messageCase_ == MessageOneofCase.ConsoleCommand) {
              subBuilder.MergeFrom(ConsoleCommand);
            }
            input.ReadMessage(subBuilder);
            ConsoleCommand = subBuilder;
            break;
          }
          case 66: {
            global::SCPDiscord.Interface.RoleResponse subBuilder = new global::SCPDiscord.Interface.RoleResponse();
            if (messageCase_ == MessageOneofCase.RoleResponse) {
              subBuilder.MergeFrom(RoleResponse);
            }
            input.ReadMessage(subBuilder);
            RoleResponse = subBuilder;
            break;
          }
          case 74: {
            global::SCPDiscord.Interface.BanCommand subBuilder = new global::SCPDiscord.Interface.BanCommand();
            if (messageCase_ == MessageOneofCase.BanCommand) {
              subBuilder.MergeFrom(BanCommand);
            }
            input.ReadMessage(subBuilder);
            BanCommand = subBuilder;
            break;
          }
          case 82: {
            global::SCPDiscord.Interface.UnbanCommand subBuilder = new global::SCPDiscord.Interface.UnbanCommand();
            if (messageCase_ == MessageOneofCase.UnbanCommand) {
              subBuilder.MergeFrom(UnbanCommand);
            }
            input.ReadMessage(subBuilder);
            UnbanCommand = subBuilder;
            break;
          }
          case 90: {
            global::SCPDiscord.Interface.KickCommand subBuilder = new global::SCPDiscord.Interface.KickCommand();
            if (messageCase_ == MessageOneofCase.KickCommand) {
              subBuilder.MergeFrom(KickCommand);
            }
            input.ReadMessage(subBuilder);
            KickCommand = subBuilder;
            break;
          }
          case 98: {
            global::SCPDiscord.Interface.KickallCommand subBuilder = new global::SCPDiscord.Interface.KickallCommand();
            if (messageCase_ == MessageOneofCase.KickallCommand) {
              subBuilder.MergeFrom(KickallCommand);
            }
            input.ReadMessage(subBuilder);
            KickallCommand = subBuilder;
            break;
          }
          case 106: {
            global::SCPDiscord.Interface.ListCommand subBuilder = new global::SCPDiscord.Interface.ListCommand();
            if (messageCase_ == MessageOneofCase.ListCommand) {
              subBuilder.MergeFrom(ListCommand);
            }
            input.ReadMessage(subBuilder);
            ListCommand = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
